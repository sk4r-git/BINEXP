
let findlib_predicates_set_by_dune pred =
   match Sys.backend_type, pred with
   | Sys.Native, "native" -> true
   | Sys.Bytecode, "byte" -> true
   | _, "mt" -> true
   | _, "mt_posix" -> true
   | _, "ppx_driver" -> true
   | _, _ -> false
let already_linked_libraries =
  [ "bigarray"
  ; "binsec"
  ; "dune-private-libs.dune-section"
  ; "dune-private-libs.meta_parser"
  ; "dune-site"
  ; "dune-site.dynlink"
  ; "dune-site.plugins"
  ; "dune-site.private"
  ; "dynlink"
  ; "ocamlgraph"
  ; "stdlib-shims"
  ; "str"
  ; "unix"
  ; "zarith"
  ]
open Dune_site_plugins.Private_.Meta_parser
let builtin_library =
  [ ("bigarray",{ name = Some "bigarray"
; entries =
    [ Rule { var = "directory"; predicates = []; action = Set; value = "+" }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "byte" ]
        ; action = Set
        ; value = "bigarray.cma"
        }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "native" ]
        ; action = Set
        ; value = "bigarray.cmxs"
        }
    ; Rule
        { var = "requires"; predicates = []; action = Set; value = "unix" }
    ]
})
  ; ("bytes",{ name = Some "bytes"; entries = [] })
  ; ("compiler-libs",{ name = Some "compiler-libs"
; entries =
    [ Rule
        { var = "directory"
        ; predicates = []
        ; action = Set
        ; value = "+compiler-libs"
        }
    ; Rule { var = "requires"; predicates = []; action = Set; value = "" }
    ; Package
        { name = Some "common"
        ; entries =
            [ Rule
                { var = "plugin"
                ; predicates = [ Pos "byte" ]
                ; action = Set
                ; value = "ocamlcommon.cma"
                }
            ; Rule
                { var = "plugin"
                ; predicates = [ Pos "native" ]
                ; action = Set
                ; value = "ocamlcommon.cmxs"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = ""
                }
            ]
        }
    ; Package
        { name = Some "bytecomp"
        ; entries =
            [ Rule
                { var = "plugin"
                ; predicates = [ Pos "byte" ]
                ; action = Set
                ; value = "ocamlbytecomp.cma"
                }
            ; Rule
                { var = "plugin"
                ; predicates = [ Pos "native" ]
                ; action = Set
                ; value = "ocamlbytecomp.cmxs"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = "compiler-libs.common"
                }
            ]
        }
    ; Package
        { name = Some "optcomp"
        ; entries =
            [ Rule
                { var = "plugin"
                ; predicates = [ Pos "byte" ]
                ; action = Set
                ; value = "ocamloptcomp.cma"
                }
            ; Rule
                { var = "plugin"
                ; predicates = [ Pos "native" ]
                ; action = Set
                ; value = "ocamloptcomp.cmxs"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = "compiler-libs.common"
                }
            ]
        }
    ; Package
        { name = Some "toplevel"
        ; entries =
            [ Rule
                { var = "plugin"
                ; predicates = [ Pos "byte" ]
                ; action = Set
                ; value = "ocamltoplevel.cma"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = "compiler-libs.bytecomp"
                }
            ]
        }
    ; Package
        { name = Some "native-toplevel"
        ; entries =
            [ Rule
                { var = "plugin"
                ; predicates = [ Pos "native" ]
                ; action = Set
                ; value = "ocamlnative-toplevel.cmxs"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = "compiler-libs.optcomp dynlink"
                }
            ]
        }
    ]
})
  ; ("dynlink",{ name = Some "dynlink"
; entries =
    [ Rule { var = "directory"; predicates = []; action = Set; value = "+" }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "byte" ]
        ; action = Set
        ; value = "dynlink.cma"
        }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "native" ]
        ; action = Set
        ; value = "dynlink.cmxs"
        }
    ; Rule { var = "requires"; predicates = []; action = Set; value = "" }
    ]
})
  ; ("ocamldoc",{ name = Some "ocamldoc"
; entries =
    [ Rule
        { var = "directory"
        ; predicates = []
        ; action = Set
        ; value = "+ocamldoc"
        }
    ; Rule
        { var = "requires"
        ; predicates = []
        ; action = Set
        ; value = "compiler-libs"
        }
    ]
})
  ; ("stdlib",{ name = Some "stdlib"; entries = [] })
  ; ("str",{ name = Some "str"
; entries =
    [ Rule { var = "directory"; predicates = []; action = Set; value = "+" }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "byte" ]
        ; action = Set
        ; value = "str.cma"
        }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "native" ]
        ; action = Set
        ; value = "str.cmxs"
        }
    ; Rule { var = "requires"; predicates = []; action = Set; value = "" }
    ]
})
  ; ("threads",{ name = Some "threads"
; entries =
    [ Rule { var = "directory"; predicates = []; action = Set; value = "+" }
    ; Rule
        { var = "requires"
        ; predicates = [ Pos "mt"; Pos "mt_vm" ]
        ; action = Set
        ; value = "threads.vm"
        }
    ; Rule
        { var = "requires"
        ; predicates = [ Pos "mt"; Pos "mt_posix" ]
        ; action = Set
        ; value = "threads.posix"
        }
    ; Package
        { name = Some "posix"
        ; entries =
            [ Rule
                { var = "directory"
                ; predicates = []
                ; action = Set
                ; value = "+threads"
                }
            ; Rule
                { var = "plugin"
                ; predicates = [ Pos "byte" ]
                ; action = Set
                ; value = "threads.cma"
                }
            ; Rule
                { var = "plugin"
                ; predicates = [ Pos "native" ]
                ; action = Set
                ; value = "threads.cmxs"
                }
            ; Rule
                { var = "requires"
                ; predicates = []
                ; action = Set
                ; value = "unix"
                }
            ]
        }
    ]
})
  ; ("unix",{ name = Some "unix"
; entries =
    [ Rule { var = "directory"; predicates = []; action = Set; value = "+" }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "byte" ]
        ; action = Set
        ; value = "unix.cma"
        }
    ; Rule
        { var = "plugin"
        ; predicates = [ Pos "native" ]
        ; action = Set
        ; value = "unix.cmxs"
        }
    ; Rule { var = "requires"; predicates = []; action = Set; value = "" }
    ]
})
  ]
