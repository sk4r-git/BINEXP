starting from core

import <.text> from licorne

return_address<64> := <.text> + 0x1d7

replace <__isoc99_scanf> by
    format<64> := rdi
    assert @[format, 4] = "%lu"z
    resultp<64> := rsi
    @[resultp, 8] := nondet as int_input
    return 1
end

replace <uc_close> by
  return
end

import <brk>, <__curbrk> from libc.so.6

replace <brk> by
  @[<__curbrk>, 8] := rdi
  return 0
end

stdout_p<64> := 0 # file position in the file descriptor 1
replace <printf> by
  if @[rdi, 7] = "%016lx"z then
    for i<64> in 0 to 15 do
      nibble<4> := (rsi lsr (4 * (15 - i))){3 .. 0}
      stdout[stdout_p] :=
       (nibble < 10 ? "0" + uext8 nibble : "a" + uext8 nibble - 10)
      stdout_p := stdout_p + 1
    end
  else
    i<64> := 0
    while @[rdi + i] <> 0 do
      stdout[stdout_p] := @[rdi + i]
      stdout_p := stdout_p + 1
      i := i + 1
    end
  end
  return
end

replace <puts> by
  i<64> := 0
  while @[rdi + i] <> 0 do
    stdout[stdout_p] := @[rdi + i]
    stdout_p := stdout_p + 1
    i := i + 1
  end
  return
end

reach * return_address then print c string stdout
cut at return_address
